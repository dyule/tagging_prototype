// Generated by CoffeeScript 1.9.3
(function() {
  var navTags, renderList, renderObject, selectedObj;

  navTags = [];

  selectedObj = void 0;

  renderList = function() {
    var dragObj, navElem, objList, propPanel, renderNavItem, tagList;
    objList = document.getElementById('objectList');
    tagList = document.getElementById('tagList');
    navElem = document.getElementById('navTags');
    propPanel = document.getElementById('propertiesPanel');
    dragObj = void 0;
    renderNavItem = function(item) {
      var navItem;
      navItem = document.createElement('div');
      navItem.className = 'navTag';
      navItem.textContent = item;
      navElem.appendChild(navItem);
      return navItem.addEventListener('click', function() {
        var index;
        index = navTags.indexOf(item);
        navTags.splice(index, 1);
        return renderList();
      });
    };
    objList.innerHTML = '';
    tagList.innerHTML = '';
    navElem.innerHTML = '';
    propPanel.style.visibility = 'hidden';
    return tagging.forObjectsAndTags((function(obj) {
      var element, i, len, nameElement, ref, tag, tagElement, tagsElement;
      element = document.createElement('div');
      nameElement = document.createElement('span');
      tagsElement = document.createElement('span');
      if (obj === selectedObj) {
        element.className = 'listObject selected';
        propPanel.style.visibility = 'visible';
      } else {
        element.className = 'listObject';
      }
      element.setAttribute('draggable', 'true');
      element.addEventListener('dragstart', function(e) {
        dragObj = obj;
        return e.dataTransfer.setData('text/plain', 'object');
      });
      nameElement.textContent = obj.name;
      nameElement.className = 'listObjectName';
      ref = obj.tags;
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        tagElement = document.createElement('span');
        tagElement.className = 'listObjectTag';
        tagElement.textContent = tag;
        tagsElement.appendChild(tagElement);
      }
      element.appendChild(nameElement);
      element.appendChild(tagsElement);
      objList.appendChild(element);
      return element.addEventListener('click', function() {
        var j, len1, listObj, ref1;
        ref1 = element.parentNode.childNodes;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          listObj = ref1[j];
          listObj.className = 'listObject';
        }
        element.className = 'listObject selected';
        selectedObj = obj;
        return renderObject(obj);
      });
    }), (function(parent, children) {
      var child, i, len, parentItem, renderChild, results;
      renderChild = function(child) {
        var childItem;
        childItem = document.createElement('div');
        childItem.className = 'childTag';
        childItem.textContent = child;
        navElem.appendChild(childItem);
        return childItem.addEventListener('click', function() {
          navTags.splice(navTags.indexOf(parent), 1);
          if (parent === "<root>") {
            navTags.push(child);
          } else {
            navTags.push(parent + "/" + child);
          }
          return renderList();
        });
      };
      parentItem = document.createElement('div');
      parentItem.className = 'parentTag';
      parentItem.textContent = parent;
      navElem.appendChild(parentItem);
      parentItem.addEventListener('click', function() {
        var index;
        index = navTags.indexOf(parent);
        navTags.splice(index, 1);
        return renderList();
      });
      results = [];
      for (i = 0, len = children.length; i < len; i++) {
        child = children[i];
        results.push(renderChild(child));
      }
      return results;
    }), (function(tag) {
      var element, nameElement;
      element = document.createElement('div');
      nameElement = document.createElement('span');
      element.className = 'listTag';
      element.addEventListener('dragover', function(e) {
        if (dragObj.tags.indexOf(tag) === -1) {
          return e.preventDefault();
        }
      });
      element.addEventListener('dragenter', function() {
        if (dragObj.tags.indexOf(tag) === -1) {
          return element.className = 'listTag dragtarget';
        }
      });
      element.addEventListener('dragleave', function() {
        return element.className = 'listTag';
      });
      element.addEventListener('drop', function(e) {
        if (dragObj.tags.indexOf(tag) === -1) {
          tagging.addTag(dragObj, tag);
          renderList();
          if (dragObj === selectedObj) {
            renderObject(selectedObj);
          }
        }
        return e.preventDefault();
      });
      nameElement.textContent = tag;
      nameElement.className = 'listTagName';
      element.appendChild(nameElement);
      element.addEventListener('click', function() {
        navTags.push(tag);
        return renderList();
      });
      return tagList.appendChild(element);
    }), navTags);
  };

  renderObject = function(obj) {
    var objClone, objTags;
    objTags = document.getElementById('objTags');
    objClone = objTags.cloneNode(false);
    document.getElementById('propertiesPanel').style.visibility = 'visible';
    document.getElementById('objName').textContent = obj.name;
    objTags.parentNode.replaceChild(objClone, objTags);
    objTags = objClone;
    tagbox(objTags, tagging.matchingTags);
    objTags.setTags(obj.tags);
    objTags.addEventListener('tagadded', function(e) {
      tagging.addTag(obj, e.detail);
      return renderList();
    });
    return objTags.addEventListener('tagremoved', function(e) {
      tagging.removeTag(obj, e.detail);
      return renderList();
    });
  };

  document.addEventListener('DOMContentLoaded', function() {
    var addButton;
    addButton = document.getElementById('addObject');
    addButton.addEventListener('click', function() {
      var name, obj;
      name = prompt('Name of object?');
      obj = {
        name: name,
        tags: navTags.slice()
      };
      tagging.addObject(obj);
      selectedObj = obj;
      renderList();
      return renderObject(obj);
    });
    return renderList();
  });

}).call(this);

//# sourceMappingURL=main.js.map
